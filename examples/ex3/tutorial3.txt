#TUTORIAL 3
#let's create a scene using some image pigments and a specular BRDF:
#The shape you can coat with image pigments are planes, spheres and boxex (for now you can't apply an image pigment on cylinders)
#if the shape you want to coat is a plane of a sphere you can use any image you like (as long as the format is pfm)
#if you want to coat a box you have to pay more attention: the image should be taken with width=neight and the box map should be
#deployed only in the 3/4 of its height straight from the bottom. As an example we provide the following scheme:
#
#	--------------
#	|            |
#	|   |2|      |
#	||1||4||0||5||
#	|   |3|      |
#	--------------
#The numeration of faces and their orientation in 3D space are consistent with the explanation
#available on [Wikipedia](https://en.wikipedia.org/wiki/Cube_mapping:).
#a material for the sky:
material sky_material(
	diffuse(image("sky.pfm")),		#now we choose an image pigment! you have to specify the
						#the name of the file containing the image you want
						#to use to coat the surface of a shape.
						#If the file isn't in the directory you are working in, you have to specify the path
						#the format must be pfm !
	uniform(<skyblue>)			
)
#a material for the floor:
material ground_material(diffuse(image("sand.pfm")), uniform(<gold>))
#a moterial for another textured sphere:
material sphere_material(diffuse(image("wood.pfm")),uniform(<black>))
#a meterial for a mirror-like sphere:
material mirror_material(
	specular(uniform(<silver>)),		#here we provide the keyword "specular" to use a specular BRDF
	uniform(<black>)
)
#a meterial for a textured box:
material box_material(diffuse(image("color_dice_4x4.pfm")), uniform(<black>))

#now let's add the shapes to the scene:
#a big sphere for the sky:
sphere(sky_material, scaling([50, 50, 50]))
#the ground:
plane(ground_material,identity)
#a chekered sphere:
sphere(sphere_material, translation([-2,-2,2]))
#a box:
box((0,0,0),(1,1,1),box_material, translation([-1,2,1.75]))
sphere(mirror_material, translation([-3,0,0]))
#a camera to look at the scene
#we rotate our camera by 180 degrees aroud the z axis so that we don't look at the line where
#the two opposite edges of the image "sky.pfm" meet each other (you can see that line mirrored on the mirror-like sphere)
camera(perspective, translation([3,0,1])*rotation_z(180), 1.0, 1.0)

#image3.png is generated by the command:
# ./KTracer render --inputfile tutorial3.txt
